import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.event.*;
import java.io.File;
import java.io.IOException;


import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.*;







public class Game extends JPanel implements KeyListener, ActionListener{
	
	private boolean playGame = false;
	private int score = 0; 
	private int numberOfBricks = 21;
	
	private Timer timer;
	private int delayTimer = 8;
	
	private int posPlayer = 280;		//paddle
	private int posBallX = 320;		//pos ball in paddle
	private int posBallY = 530;
	private int ballDirX = -1;			//generates movement
	private int ballDirY = -2;
	
	
	private Map gameMap;
	
	
	
	
	String nameSoundBorders = "bounce.wav";
	AudioInputStream audioInputStream;
	
	
	public Game() {
		gameMap = new Map(3, 7); // 3 rows, 7 columns 
		addKeyListener(this);
		setFocusable(true);		//up down left right keys
		setFocusTraversalKeysEnabled(false);
		timer = new Timer(delayTimer, this);
		timer.start();
		
		
		
		
		
	

		
	}
	
	public void paint(Graphics g) {
		
		//background
		g.setColor(Color.BLACK);
		g.fillRect(1, 1, 692, 592);
		
		
		//bricks
		
		gameMap.draw((Graphics2D)g);
	
		
		
		//borders
		g.setColor(Color.yellow);
		g.fillRect(0, 0, 3, 592);	//left border
		g.fillRect(0, 0, 692, 3);	//up border
		g.fillRect(691, 0, 3, 592);	//right border
		
		//paddle
		g.setColor(Color.green);
		g.fillRect(posPlayer, 550, 100, 8);
		
		//ball
		g.setColor(Color.red);
		g.fillOval(posBallX, posBallY, 20, 20);
		
		
		
		g.dispose();
		
		

	}

	
	
	
	
	
	@Override
	public void actionPerformed(ActionEvent e) {
		
		timer.start();
		
		if(playGame == true) {
			
			if(new Rectangle(posBallX, posBallY, 20, 20).intersects(new Rectangle(posPlayer, 550, 100, 8))) {
			    ballDirY = -ballDirY;
			   }
			
			B: for(int i = 0; i < gameMap.map.length; i++) {
				
				for(int j = 0; j < gameMap.map[0].length; j++) {
					
					if(gameMap.map[i][j] > 0) {
						
						int posBrickX = j * gameMap.brickWidth + 80;
						int posBrickY = i * gameMap.brickHeight + 50;
						int brickWidth = gameMap.brickWidth;
						int brickHeight = gameMap.brickHeight;
						
						
						Rectangle rect = new Rectangle(posBrickX, posBrickY, brickWidth, brickHeight);
						Rectangle ballRect = new Rectangle(posBallX, posBallY, 20, 20);
						Rectangle brickRect = rect;
						
						if(ballRect.intersects(brickRect)) {
							
							gameMap.setBrickValue(0, i, j);
							numberOfBricks--;
							score += 5;
							
							
							if(posBallX + 19 <= brickRect.x || posBallX + 1  >= brickRect.x + brickRect.width) {//validate
								
								ballDirX = -ballDirX;
								
							}else {
								
								ballDirY = -ballDirY;
							}
							
							break B;
						}
						
					}
				}
				
			}
			
			posBallX += ballDirX;		//ball´s movement 
										//ball direction is negative so pos ball´s pos goes up
			posBallY += ballDirY;
			
			if(posBallX < 0) {
										//left border
				ballDirX = -ballDirX;	//	ball direction is positive so pos goes down
				try {
					audioInputStream = AudioSystem.getAudioInputStream(new File(nameSoundBorders).getAbsoluteFile());
					Clip clip = AudioSystem.getClip();
					clip.open(audioInputStream);
					clip.start();
				} catch (UnsupportedAudioFileException | IOException e1) {		
					
					e1.printStackTrace();
				} catch (LineUnavailableException e1) {
					
					e1.printStackTrace();
				}
			}
			
			
			if(posBallY < 0) {
										//top border
				ballDirY = -ballDirY;//	ball direction is positive so pos goes down
				
				try {
					audioInputStream = AudioSystem.getAudioInputStream(new File(nameSoundBorders).getAbsoluteFile());
					Clip clip = AudioSystem.getClip();
					clip.open(audioInputStream);
					clip.start();
				} catch (UnsupportedAudioFileException | IOException e1) {		
					
					e1.printStackTrace();
				} catch (LineUnavailableException e1) {
					
					e1.printStackTrace();
				}
			}
			
			if(posBallX > 670) {				//right border
				
				try {
					audioInputStream = AudioSystem.getAudioInputStream(new File(nameSoundBorders).getAbsoluteFile());
					Clip clip = AudioSystem.getClip();
					clip.open(audioInputStream);
					clip.start();
				} catch (UnsupportedAudioFileException | IOException e1) {		
					e1.printStackTrace();
				} catch (LineUnavailableException e1) {
					
					e1.printStackTrace();
				}
										
				ballDirX = -ballDirX;		//	ball direction is positive so pos goes down
				
			}
			
			
		}
		
		repaint();
		
	}

	
	
	
	
	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	
	
	
	
	@Override
	public void keyPressed(KeyEvent e) {
		
		if(e.getKeyCode() == KeyEvent.VK_RIGHT) {
			
			if(posPlayer >= 600){
				posPlayer = 600;
			}
			else {
				moveRight();
			}
			
		}
		if(e.getKeyCode() == KeyEvent.VK_LEFT) {
				
			if(posPlayer <= 10){
				posPlayer = 10;
			}
			else {
				moveLeft();
			}
		}
				
	}
	
	
	
	public int getScore() {
		return score;
	}
	
	
	public void moveRight() {
		
		playGame = true;
		posPlayer += 20;
	}
	
	
	
	
	
	public void moveLeft() {
		
		playGame = true;
		posPlayer -=20;
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

}
